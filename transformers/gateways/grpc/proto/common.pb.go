// Code generated by protoc-gen-go. DO NOT EDIT.
// source: common.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	common.proto
	queries.proto

It has these top-level messages:
	Collection
	Queue
	QueuesCmds
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import validator "."

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// FieldValidator from public import validator.proto
type FieldValidator validator.FieldValidator

func (m *FieldValidator) Reset()                { (*validator.FieldValidator)(m).Reset() }
func (m *FieldValidator) String() string        { return (*validator.FieldValidator)(m).String() }
func (*FieldValidator) ProtoMessage()           {}
func (m *FieldValidator) GetRegex() string      { return (*validator.FieldValidator)(m).GetRegex() }
func (m *FieldValidator) GetIntGt() int64       { return (*validator.FieldValidator)(m).GetIntGt() }
func (m *FieldValidator) GetIntLt() int64       { return (*validator.FieldValidator)(m).GetIntLt() }
func (m *FieldValidator) GetMsgExists() bool    { return (*validator.FieldValidator)(m).GetMsgExists() }
func (m *FieldValidator) GetHumanError() string { return (*validator.FieldValidator)(m).GetHumanError() }
func (m *FieldValidator) GetFloatGt() float64   { return (*validator.FieldValidator)(m).GetFloatGt() }
func (m *FieldValidator) GetFloatLt() float64   { return (*validator.FieldValidator)(m).GetFloatLt() }
func (m *FieldValidator) GetFloatEpsilon() float64 {
	return (*validator.FieldValidator)(m).GetFloatEpsilon()
}
func (m *FieldValidator) GetFloatGte() float64 { return (*validator.FieldValidator)(m).GetFloatGte() }
func (m *FieldValidator) GetFloatLte() float64 { return (*validator.FieldValidator)(m).GetFloatLte() }
func (m *FieldValidator) GetStringNotEmpty() bool {
	return (*validator.FieldValidator)(m).GetStringNotEmpty()
}
func (m *FieldValidator) GetRepeatedCountMin() int64 {
	return (*validator.FieldValidator)(m).GetRepeatedCountMin()
}
func (m *FieldValidator) GetRepeatedCountMax() int64 {
	return (*validator.FieldValidator)(m).GetRepeatedCountMax()
}
func (m *FieldValidator) GetLengthGt() int64 { return (*validator.FieldValidator)(m).GetLengthGt() }
func (m *FieldValidator) GetLengthLt() int64 { return (*validator.FieldValidator)(m).GetLengthLt() }
func (m *FieldValidator) GetLengthEq() int64 { return (*validator.FieldValidator)(m).GetLengthEq() }

// field from public import validator.proto
var E_Field = validator.E_Field

// Collection wraps message types that are used in collection-related methods.
type Collection struct {
}

func (m *Collection) Reset()                    { *m = Collection{} }
func (m *Collection) String() string            { return proto1.CompactTextString(m) }
func (*Collection) ProtoMessage()               {}
func (*Collection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Params represents various parameters that can be applied to database methods
// that are working with collections (like pagination).
type Collection_Params struct {
	Cursor string `protobuf:"bytes,1,opt,name=cursor" json:"cursor,omitempty"`
	Limit  uint32 `protobuf:"varint,2,opt,name=limit" json:"limit,omitempty"`
}

func (m *Collection_Params) Reset()                    { *m = Collection_Params{} }
func (m *Collection_Params) String() string            { return proto1.CompactTextString(m) }
func (*Collection_Params) ProtoMessage()               {}
func (*Collection_Params) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Collection_Params) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *Collection_Params) GetLimit() uint32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// Info represents a statistical information returned from database methods
// that are working with collections.
type Collection_Info struct {
	Cursor string `protobuf:"bytes,1,opt,name=cursor" json:"cursor,omitempty"`
	Total  uint64 `protobuf:"varint,2,opt,name=total" json:"total,omitempty"`
}

func (m *Collection_Info) Reset()                    { *m = Collection_Info{} }
func (m *Collection_Info) String() string            { return proto1.CompactTextString(m) }
func (*Collection_Info) ProtoMessage()               {}
func (*Collection_Info) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *Collection_Info) GetCursor() string {
	if m != nil {
		return m.Cursor
	}
	return ""
}

func (m *Collection_Info) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto1.RegisterType((*Collection)(nil), "gork_gateways_grpc.Collection")
	proto1.RegisterType((*Collection_Params)(nil), "gork_gateways_grpc.Collection.Params")
	proto1.RegisterType((*Collection_Info)(nil), "gork_gateways_grpc.Collection.Info")
}

func init() { proto1.RegisterFile("common.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xce, 0xcf, 0xcd,
	0xcd, 0xcf, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x4a, 0xcf, 0x2f, 0xca, 0x8e, 0x4f,
	0x4f, 0x2c, 0x49, 0x2d, 0x4f, 0xac, 0x2c, 0x8e, 0x4f, 0x2f, 0x2a, 0x48, 0x96, 0xe2, 0x2f, 0x4b,
	0xcc, 0xc9, 0x4c, 0x49, 0x2c, 0xc9, 0x2f, 0x82, 0x28, 0x52, 0x6a, 0x62, 0xe4, 0xe2, 0x72, 0xce,
	0xcf, 0xc9, 0x49, 0x4d, 0x2e, 0xc9, 0xcc, 0xcf, 0x93, 0xb2, 0xe3, 0x62, 0x0b, 0x48, 0x2c, 0x4a,
	0xcc, 0x2d, 0x16, 0x12, 0xe3, 0x62, 0x4b, 0x2e, 0x2d, 0x2a, 0xce, 0x2f, 0x92, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x82, 0xf2, 0x84, 0x64, 0xb8, 0x58, 0x73, 0x32, 0x73, 0x33, 0x4b, 0x24, 0x98,
	0x14, 0x18, 0x35, 0x78, 0x9d, 0xd8, 0x1e, 0xdd, 0x97, 0x67, 0x92, 0x48, 0x0d, 0x82, 0x08, 0x4a,
	0x99, 0x70, 0xb1, 0x78, 0xe6, 0xa5, 0xe5, 0xe3, 0xd4, 0x2d, 0xc2, 0xc5, 0x5a, 0x92, 0x5f, 0x92,
	0x98, 0x03, 0xd6, 0xcd, 0x12, 0x04, 0xe1, 0x38, 0xb1, 0x47, 0xb1, 0x82, 0x5d, 0x13, 0xc0, 0x90,
	0xc4, 0x06, 0x66, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x92, 0x6b, 0x4e, 0x3d, 0xcb, 0x00,
	0x00, 0x00,
}
