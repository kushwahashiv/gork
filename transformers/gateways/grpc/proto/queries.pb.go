// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: queries.proto

package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Queue represents a single queue.
type Queue struct {
	Id        string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string           `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Settings  []*Queue_Setting `protobuf:"bytes,3,rep,name=settings" json:"settings,omitempty"`
	CreatedAt string           `protobuf:"bytes,4,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (m *Queue) Reset()                    { *m = Queue{} }
func (m *Queue) String() string            { return proto1.CompactTextString(m) }
func (*Queue) ProtoMessage()               {}
func (*Queue) Descriptor() ([]byte, []int) { return fileDescriptorQueries, []int{0} }

type Queue_Setting struct {
	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Queue_Setting) Reset()                    { *m = Queue_Setting{} }
func (m *Queue_Setting) String() string            { return proto1.CompactTextString(m) }
func (*Queue_Setting) ProtoMessage()               {}
func (*Queue_Setting) Descriptor() ([]byte, []int) { return fileDescriptorQueries, []int{0, 0} }

// QueuesCmds is a container that wraps request/response messages of all queue-related RPC commands.
type QueuesCmds struct {
}

func (m *QueuesCmds) Reset()                    { *m = QueuesCmds{} }
func (m *QueuesCmds) String() string            { return proto1.CompactTextString(m) }
func (*QueuesCmds) ProtoMessage()               {}
func (*QueuesCmds) Descriptor() ([]byte, []int) { return fileDescriptorQueries, []int{1} }

type QueuesCmds_List struct {
}

func (m *QueuesCmds_List) Reset()                    { *m = QueuesCmds_List{} }
func (m *QueuesCmds_List) String() string            { return proto1.CompactTextString(m) }
func (*QueuesCmds_List) ProtoMessage()               {}
func (*QueuesCmds_List) Descriptor() ([]byte, []int) { return fileDescriptorQueries, []int{1, 0} }

type QueuesCmds_List_Request struct {
	Params *Collection_Params `protobuf:"bytes,1,opt,name=params" json:"params,omitempty"`
}

func (m *QueuesCmds_List_Request) Reset()         { *m = QueuesCmds_List_Request{} }
func (m *QueuesCmds_List_Request) String() string { return proto1.CompactTextString(m) }
func (*QueuesCmds_List_Request) ProtoMessage()    {}
func (*QueuesCmds_List_Request) Descriptor() ([]byte, []int) {
	return fileDescriptorQueries, []int{1, 0, 0}
}

type QueuesCmds_List_Response struct {
	Info    *Collection_Info `protobuf:"bytes,1,opt,name=info" json:"info,omitempty"`
	Records []*Queue         `protobuf:"bytes,2,rep,name=records" json:"records,omitempty"`
}

func (m *QueuesCmds_List_Response) Reset()         { *m = QueuesCmds_List_Response{} }
func (m *QueuesCmds_List_Response) String() string { return proto1.CompactTextString(m) }
func (*QueuesCmds_List_Response) ProtoMessage()    {}
func (*QueuesCmds_List_Response) Descriptor() ([]byte, []int) {
	return fileDescriptorQueries, []int{1, 0, 1}
}

type QueuesCmds_Create struct {
}

func (m *QueuesCmds_Create) Reset()                    { *m = QueuesCmds_Create{} }
func (m *QueuesCmds_Create) String() string            { return proto1.CompactTextString(m) }
func (*QueuesCmds_Create) ProtoMessage()               {}
func (*QueuesCmds_Create) Descriptor() ([]byte, []int) { return fileDescriptorQueries, []int{1, 1} }

type QueuesCmds_Create_Request struct {
	Name     string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Settings []*Queue_Setting `protobuf:"bytes,2,rep,name=settings" json:"settings,omitempty"`
}

func (m *QueuesCmds_Create_Request) Reset()         { *m = QueuesCmds_Create_Request{} }
func (m *QueuesCmds_Create_Request) String() string { return proto1.CompactTextString(m) }
func (*QueuesCmds_Create_Request) ProtoMessage()    {}
func (*QueuesCmds_Create_Request) Descriptor() ([]byte, []int) {
	return fileDescriptorQueries, []int{1, 1, 0}
}

type QueuesCmds_Create_Response struct {
	Record *Queue `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *QueuesCmds_Create_Response) Reset()         { *m = QueuesCmds_Create_Response{} }
func (m *QueuesCmds_Create_Response) String() string { return proto1.CompactTextString(m) }
func (*QueuesCmds_Create_Response) ProtoMessage()    {}
func (*QueuesCmds_Create_Response) Descriptor() ([]byte, []int) {
	return fileDescriptorQueries, []int{1, 1, 1}
}

type QueuesCmds_Read struct {
}

func (m *QueuesCmds_Read) Reset()                    { *m = QueuesCmds_Read{} }
func (m *QueuesCmds_Read) String() string            { return proto1.CompactTextString(m) }
func (*QueuesCmds_Read) ProtoMessage()               {}
func (*QueuesCmds_Read) Descriptor() ([]byte, []int) { return fileDescriptorQueries, []int{1, 2} }

type QueuesCmds_Read_Request struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueuesCmds_Read_Request) Reset()         { *m = QueuesCmds_Read_Request{} }
func (m *QueuesCmds_Read_Request) String() string { return proto1.CompactTextString(m) }
func (*QueuesCmds_Read_Request) ProtoMessage()    {}
func (*QueuesCmds_Read_Request) Descriptor() ([]byte, []int) {
	return fileDescriptorQueries, []int{1, 2, 0}
}

type QueuesCmds_Read_Response struct {
	Record *Queue `protobuf:"bytes,1,opt,name=record" json:"record,omitempty"`
}

func (m *QueuesCmds_Read_Response) Reset()         { *m = QueuesCmds_Read_Response{} }
func (m *QueuesCmds_Read_Response) String() string { return proto1.CompactTextString(m) }
func (*QueuesCmds_Read_Response) ProtoMessage()    {}
func (*QueuesCmds_Read_Response) Descriptor() ([]byte, []int) {
	return fileDescriptorQueries, []int{1, 2, 1}
}

type QueuesCmds_Delete struct {
}

func (m *QueuesCmds_Delete) Reset()                    { *m = QueuesCmds_Delete{} }
func (m *QueuesCmds_Delete) String() string            { return proto1.CompactTextString(m) }
func (*QueuesCmds_Delete) ProtoMessage()               {}
func (*QueuesCmds_Delete) Descriptor() ([]byte, []int) { return fileDescriptorQueries, []int{1, 3} }

type QueuesCmds_Delete_Request struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueuesCmds_Delete_Request) Reset()         { *m = QueuesCmds_Delete_Request{} }
func (m *QueuesCmds_Delete_Request) String() string { return proto1.CompactTextString(m) }
func (*QueuesCmds_Delete_Request) ProtoMessage()    {}
func (*QueuesCmds_Delete_Request) Descriptor() ([]byte, []int) {
	return fileDescriptorQueries, []int{1, 3, 0}
}

type QueuesCmds_Delete_Response struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueuesCmds_Delete_Response) Reset()         { *m = QueuesCmds_Delete_Response{} }
func (m *QueuesCmds_Delete_Response) String() string { return proto1.CompactTextString(m) }
func (*QueuesCmds_Delete_Response) ProtoMessage()    {}
func (*QueuesCmds_Delete_Response) Descriptor() ([]byte, []int) {
	return fileDescriptorQueries, []int{1, 3, 1}
}

func init() {
	proto1.RegisterType((*Queue)(nil), "gork_gateways_grpc.Queue")
	proto1.RegisterType((*Queue_Setting)(nil), "gork_gateways_grpc.Queue.Setting")
	proto1.RegisterType((*QueuesCmds)(nil), "gork_gateways_grpc.QueuesCmds")
	proto1.RegisterType((*QueuesCmds_List)(nil), "gork_gateways_grpc.QueuesCmds.List")
	proto1.RegisterType((*QueuesCmds_List_Request)(nil), "gork_gateways_grpc.QueuesCmds.List.Request")
	proto1.RegisterType((*QueuesCmds_List_Response)(nil), "gork_gateways_grpc.QueuesCmds.List.Response")
	proto1.RegisterType((*QueuesCmds_Create)(nil), "gork_gateways_grpc.QueuesCmds.Create")
	proto1.RegisterType((*QueuesCmds_Create_Request)(nil), "gork_gateways_grpc.QueuesCmds.Create.Request")
	proto1.RegisterType((*QueuesCmds_Create_Response)(nil), "gork_gateways_grpc.QueuesCmds.Create.Response")
	proto1.RegisterType((*QueuesCmds_Read)(nil), "gork_gateways_grpc.QueuesCmds.Read")
	proto1.RegisterType((*QueuesCmds_Read_Request)(nil), "gork_gateways_grpc.QueuesCmds.Read.Request")
	proto1.RegisterType((*QueuesCmds_Read_Response)(nil), "gork_gateways_grpc.QueuesCmds.Read.Response")
	proto1.RegisterType((*QueuesCmds_Delete)(nil), "gork_gateways_grpc.QueuesCmds.Delete")
	proto1.RegisterType((*QueuesCmds_Delete_Request)(nil), "gork_gateways_grpc.QueuesCmds.Delete.Request")
	proto1.RegisterType((*QueuesCmds_Delete_Response)(nil), "gork_gateways_grpc.QueuesCmds.Delete.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Queues service

type QueuesClient interface {
	List(ctx context.Context, in *QueuesCmds_List_Request, opts ...grpc.CallOption) (*QueuesCmds_List_Response, error)
	Create(ctx context.Context, in *QueuesCmds_Create_Request, opts ...grpc.CallOption) (*QueuesCmds_Create_Response, error)
	Read(ctx context.Context, in *QueuesCmds_Read_Request, opts ...grpc.CallOption) (*QueuesCmds_Read_Response, error)
	Delete(ctx context.Context, in *QueuesCmds_Delete_Request, opts ...grpc.CallOption) (*QueuesCmds_Delete_Response, error)
}

type queuesClient struct {
	cc *grpc.ClientConn
}

func NewQueuesClient(cc *grpc.ClientConn) QueuesClient {
	return &queuesClient{cc}
}

func (c *queuesClient) List(ctx context.Context, in *QueuesCmds_List_Request, opts ...grpc.CallOption) (*QueuesCmds_List_Response, error) {
	out := new(QueuesCmds_List_Response)
	err := grpc.Invoke(ctx, "/gork_gateways_grpc.Queues/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesClient) Create(ctx context.Context, in *QueuesCmds_Create_Request, opts ...grpc.CallOption) (*QueuesCmds_Create_Response, error) {
	out := new(QueuesCmds_Create_Response)
	err := grpc.Invoke(ctx, "/gork_gateways_grpc.Queues/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesClient) Read(ctx context.Context, in *QueuesCmds_Read_Request, opts ...grpc.CallOption) (*QueuesCmds_Read_Response, error) {
	out := new(QueuesCmds_Read_Response)
	err := grpc.Invoke(ctx, "/gork_gateways_grpc.Queues/Read", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queuesClient) Delete(ctx context.Context, in *QueuesCmds_Delete_Request, opts ...grpc.CallOption) (*QueuesCmds_Delete_Response, error) {
	out := new(QueuesCmds_Delete_Response)
	err := grpc.Invoke(ctx, "/gork_gateways_grpc.Queues/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Queues service

type QueuesServer interface {
	List(context.Context, *QueuesCmds_List_Request) (*QueuesCmds_List_Response, error)
	Create(context.Context, *QueuesCmds_Create_Request) (*QueuesCmds_Create_Response, error)
	Read(context.Context, *QueuesCmds_Read_Request) (*QueuesCmds_Read_Response, error)
	Delete(context.Context, *QueuesCmds_Delete_Request) (*QueuesCmds_Delete_Response, error)
}

func RegisterQueuesServer(s *grpc.Server, srv QueuesServer) {
	s.RegisterService(&_Queues_serviceDesc, srv)
}

func _Queues_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuesCmds_List_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gork_gateways_grpc.Queues/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesServer).List(ctx, req.(*QueuesCmds_List_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queues_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuesCmds_Create_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gork_gateways_grpc.Queues/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesServer).Create(ctx, req.(*QueuesCmds_Create_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queues_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuesCmds_Read_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gork_gateways_grpc.Queues/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesServer).Read(ctx, req.(*QueuesCmds_Read_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Queues_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueuesCmds_Delete_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueuesServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gork_gateways_grpc.Queues/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueuesServer).Delete(ctx, req.(*QueuesCmds_Delete_Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Queues_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gork_gateways_grpc.Queues",
	HandlerType: (*QueuesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _Queues_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Queues_Create_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Queues_Read_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Queues_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "queries.proto",
}

func (m *Queue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Queue) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQueries(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQueries(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Settings) > 0 {
		for _, msg := range m.Settings {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintQueries(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.CreatedAt) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintQueries(dAtA, i, uint64(len(m.CreatedAt)))
		i += copy(dAtA[i:], m.CreatedAt)
	}
	return i, nil
}

func (m *Queue_Setting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Queue_Setting) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Key) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQueries(dAtA, i, uint64(len(m.Key)))
		i += copy(dAtA[i:], m.Key)
	}
	if len(m.Value) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintQueries(dAtA, i, uint64(len(m.Value)))
		i += copy(dAtA[i:], m.Value)
	}
	return i, nil
}

func (m *QueuesCmds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *QueuesCmds_List) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds_List) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *QueuesCmds_List_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds_List_Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Params != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQueries(dAtA, i, uint64(m.Params.Size()))
		n1, err := m.Params.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *QueuesCmds_List_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds_List_Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Info != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQueries(dAtA, i, uint64(m.Info.Size()))
		n2, err := m.Info.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if len(m.Records) > 0 {
		for _, msg := range m.Records {
			dAtA[i] = 0x12
			i++
			i = encodeVarintQueries(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QueuesCmds_Create) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds_Create) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *QueuesCmds_Create_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds_Create_Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQueries(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Settings) > 0 {
		for _, msg := range m.Settings {
			dAtA[i] = 0x12
			i++
			i = encodeVarintQueries(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *QueuesCmds_Create_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds_Create_Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQueries(dAtA, i, uint64(m.Record.Size()))
		n3, err := m.Record.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *QueuesCmds_Read) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds_Read) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *QueuesCmds_Read_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds_Read_Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQueries(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *QueuesCmds_Read_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds_Read_Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Record != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQueries(dAtA, i, uint64(m.Record.Size()))
		n4, err := m.Record.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n4
	}
	return i, nil
}

func (m *QueuesCmds_Delete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds_Delete) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *QueuesCmds_Delete_Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds_Delete_Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintQueries(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *QueuesCmds_Delete_Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueuesCmds_Delete_Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result {
		dAtA[i] = 0x8
		i++
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func encodeFixed64Queries(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Queries(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintQueries(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Queue) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	if len(m.Settings) > 0 {
		for _, e := range m.Settings {
			l = e.Size()
			n += 1 + l + sovQueries(uint64(l))
		}
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	return n
}

func (m *Queue_Setting) Size() (n int) {
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	return n
}

func (m *QueuesCmds) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *QueuesCmds_List) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *QueuesCmds_List_Request) Size() (n int) {
	var l int
	_ = l
	if m.Params != nil {
		l = m.Params.Size()
		n += 1 + l + sovQueries(uint64(l))
	}
	return n
}

func (m *QueuesCmds_List_Response) Size() (n int) {
	var l int
	_ = l
	if m.Info != nil {
		l = m.Info.Size()
		n += 1 + l + sovQueries(uint64(l))
	}
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQueries(uint64(l))
		}
	}
	return n
}

func (m *QueuesCmds_Create) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *QueuesCmds_Create_Request) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	if len(m.Settings) > 0 {
		for _, e := range m.Settings {
			l = e.Size()
			n += 1 + l + sovQueries(uint64(l))
		}
	}
	return n
}

func (m *QueuesCmds_Create_Response) Size() (n int) {
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovQueries(uint64(l))
	}
	return n
}

func (m *QueuesCmds_Read) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *QueuesCmds_Read_Request) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	return n
}

func (m *QueuesCmds_Read_Response) Size() (n int) {
	var l int
	_ = l
	if m.Record != nil {
		l = m.Record.Size()
		n += 1 + l + sovQueries(uint64(l))
	}
	return n
}

func (m *QueuesCmds_Delete) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *QueuesCmds_Delete_Request) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQueries(uint64(l))
	}
	return n
}

func (m *QueuesCmds_Delete_Response) Size() (n int) {
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func sovQueries(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozQueries(x uint64) (n int) {
	return sovQueries(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Queue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Queue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Queue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = append(m.Settings, &Queue_Setting{})
			if err := m.Settings[len(m.Settings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Queue_Setting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Setting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Setting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueuesCmds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueuesCmds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds_List) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: List: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: List: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds_List_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Params == nil {
				m.Params = &Collection_Params{}
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds_List_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Info == nil {
				m.Info = &Collection_Info{}
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, &Queue{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds_Create) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Create: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Create: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds_Create_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = append(m.Settings, &Queue_Setting{})
			if err := m.Settings[len(m.Settings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds_Create_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Queue{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds_Read) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Read: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Read: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds_Read_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds_Read_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Record == nil {
				m.Record = &Queue{}
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds_Delete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds_Delete_Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQueries
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueuesCmds_Delete_Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQueries(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthQueries
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQueries(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQueries
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQueries
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthQueries
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowQueries
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipQueries(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthQueries = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQueries   = fmt.Errorf("proto: integer overflow")
)

func init() { proto1.RegisterFile("queries.proto", fileDescriptorQueries) }

var fileDescriptorQueries = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xbb, 0x8e, 0xeb, 0xa4, 0xd3, 0xef, 0x43, 0x68, 0x85, 0x90, 0xbb, 0x02, 0xab, 0x04,
	0x21, 0x55, 0x02, 0x2c, 0x35, 0x3d, 0x70, 0xca, 0x01, 0x82, 0x04, 0x48, 0x1c, 0x60, 0xb9, 0x22,
	0x85, 0xc5, 0x9e, 0x5a, 0x56, 0x6d, 0x6f, 0xea, 0x5d, 0x03, 0x7d, 0x13, 0x8e, 0x5c, 0xb8, 0xf1,
	0x00, 0x1c, 0x38, 0x70, 0xac, 0x38, 0xf1, 0x08, 0x60, 0x5e, 0x04, 0x65, 0x77, 0x93, 0x54, 0x40,
	0x9a, 0x20, 0x6e, 0xbb, 0xeb, 0xdf, 0xcc, 0x7f, 0xfe, 0x33, 0x23, 0xc3, 0xff, 0xc7, 0x0d, 0xd6,
	0x39, 0xaa, 0x78, 0x52, 0x4b, 0x2d, 0x29, 0xcd, 0x64, 0x7d, 0x34, 0xce, 0x84, 0xc6, 0xd7, 0xe2,
	0x44, 0x8d, 0xb3, 0x7a, 0x92, 0xb0, 0xff, 0x12, 0x59, 0x96, 0xb2, 0xb2, 0x44, 0xff, 0x13, 0x81,
	0xcd, 0xa7, 0x0d, 0x36, 0x48, 0x2f, 0x80, 0x97, 0xa7, 0x21, 0xd9, 0x25, 0x7b, 0x5b, 0xdc, 0xcb,
	0x53, 0x4a, 0xc1, 0xaf, 0x44, 0x89, 0xa1, 0x67, 0x5e, 0xcc, 0x99, 0x0e, 0xa1, 0xa7, 0x50, 0xeb,
	0xbc, 0xca, 0x54, 0xd8, 0xd9, 0xed, 0xec, 0x6d, 0x0f, 0xae, 0xc5, 0xbf, 0x4b, 0xc4, 0x26, 0x61,
	0xfc, 0xcc, 0x92, 0x7c, 0x1e, 0x42, 0xaf, 0x02, 0x24, 0x35, 0x0a, 0x8d, 0xe9, 0x58, 0xe8, 0xd0,
	0x37, 0x89, 0xb7, 0xdc, 0xcb, 0x5d, 0xcd, 0xf6, 0xa1, 0xeb, 0x62, 0xe8, 0x45, 0xe8, 0x1c, 0xe1,
	0x89, 0xab, 0x66, 0x7a, 0xa4, 0x97, 0x60, 0xf3, 0x95, 0x28, 0x9a, 0x59, 0x3d, 0xf6, 0xd2, 0xff,
	0xe0, 0x03, 0x18, 0x35, 0x35, 0x2a, 0x53, 0xc5, 0xbe, 0x10, 0xf0, 0x1f, 0xe7, 0x4a, 0xb3, 0x87,
	0xd0, 0xe5, 0x78, 0xdc, 0xa0, 0xd2, 0x74, 0x08, 0xc1, 0x44, 0xd4, 0xa2, 0x54, 0x26, 0xdb, 0xf6,
	0xe0, 0xc6, 0x9f, 0x2a, 0x1e, 0xc9, 0xa2, 0xc0, 0x44, 0xe7, 0xb2, 0x8a, 0x9f, 0x18, 0x98, 0xbb,
	0x20, 0xf6, 0x06, 0x7a, 0x1c, 0xd5, 0x44, 0x56, 0x0a, 0xe9, 0x1d, 0xf0, 0xf3, 0xea, 0x50, 0xba,
	0x44, 0xd7, 0x57, 0x24, 0x7a, 0x54, 0x1d, 0x4a, 0x6e, 0x02, 0xe8, 0x01, 0x74, 0x6b, 0x4c, 0x64,
	0x9d, 0xaa, 0xd0, 0x33, 0x6d, 0xdb, 0x59, 0xda, 0x36, 0x3e, 0x23, 0xd9, 0x7b, 0x02, 0xc1, 0xc8,
	0x34, 0x87, 0x3d, 0x5f, 0xd8, 0x99, 0x8d, 0x85, 0x2c, 0x19, 0x8b, 0xf7, 0xd7, 0x63, 0x61, 0xc3,
	0x33, 0x16, 0xf7, 0x21, 0xb0, 0xfa, 0xce, 0xe4, 0x39, 0x85, 0x3a, 0x90, 0xbd, 0x00, 0x9f, 0xa3,
	0x48, 0xd9, 0xce, 0xa2, 0xc8, 0x5f, 0x76, 0xe9, 0x5f, 0x15, 0x1e, 0x40, 0x70, 0x1f, 0x0b, 0xd4,
	0x78, 0x9e, 0x46, 0xff, 0x8c, 0xc6, 0xe5, 0xa9, 0x86, 0x6a, 0x0a, 0x6d, 0xbe, 0xf7, 0xb8, 0xbb,
	0x0d, 0xde, 0x75, 0x20, 0xb0, 0xeb, 0x42, 0x85, 0xdd, 0x14, 0x7a, 0x73, 0xa9, 0xbc, 0x59, 0xa9,
	0x78, 0x0a, 0xc5, 0x4e, 0x93, 0xdd, 0x5a, 0x0f, 0x76, 0x55, 0x64, 0xb3, 0xf9, 0xd1, 0xdb, 0x2b,
	0xe2, 0x2c, 0x36, 0x97, 0x89, 0xd7, 0xc5, 0x9d, 0x90, 0xb0, 0x13, 0x58, 0xe9, 0x65, 0x0a, 0xad,
	0xed, 0xc5, 0xc1, 0x0b, 0x2f, 0x76, 0x04, 0x2b, 0xbd, 0x58, 0x6c, 0x6d, 0x2f, 0x73, 0xdc, 0x0a,
	0xdd, 0xbb, 0x72, 0xfa, 0x3d, 0xda, 0xf8, 0xd8, 0x46, 0xe4, 0x73, 0x1b, 0x91, 0xd3, 0x36, 0x22,
	0x5f, 0xdb, 0x88, 0x7c, 0x6b, 0x23, 0xf2, 0xf6, 0x47, 0xb4, 0xf1, 0x32, 0x30, 0x7f, 0xad, 0x83,
	0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xad, 0xd2, 0xea, 0xe8, 0x04, 0x00, 0x00,
}
